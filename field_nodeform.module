<?php

/**
 * Implements hook_field_info()
 */
function field_nodeform_field_info() {
  return array(
    'field_nodeform' => array(
      'label' => t('Node edit form'),
      'description' => t('This field provides node edit form.'),
//      'settings' => array('max_length' => 255),
//      'instance_settings' => array('text_processing' => 0),
      'default_widget' => 'field_nodeform_widget',
      'default_formatter' => 'field_nodeform_formatter',
    ),
  );
}

/**
 * Implements hook_field_widget_info()
 */
function field_nodeform_field_widget_info() {
  return array(
    'field_nodeform_widget' => array(
      'label' => t('Default'),
      'field types' => array('field_nodeform'),
      'settings' => array(
        'enabled_fields' => array(),
      ),
      'behaviors' => array(
//        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_settings_form().
 */
function field_nodeform_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  $options = array();

  // For exmaple: comment_node_task
  $bundle_name = substr($instance['bundle'], 13);

  $type = node_type_load($bundle_name);

  if ($type->has_title) {
      $options['title'] = check_plain($type->title_label);
  }

  $fields_info = field_info_instances('node', $bundle_name);

  foreach ($fields_info as $field_name => $value) {
    $options[$field_name] = $value['label'];
  }

//dpm($field);
//dpm($instance);

  $form['enabled_fields'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Enabled fields'),
    '#options' => $options,
    '#default_value' => $settings['enabled_fields'],
    '#description' => t('Select node fields you want to display in the comment form.'),
//    '#access' => file_progress_implementation(),
  );

  return $form;
}

/**
 * Implements hook_field_widget_form()
 */
function field_nodeform_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  if (!isset($form['#node'])) {
    return;
  }

  $widget = $instance['widget'];
  $settings = $widget['settings'];

//  dpm($form);
//  dpm($form_state);
//  dpm($field);
//  dpm($instance);
//  dpm($items);

  $element += array(
    '#tree' => TRUE,
    '#parents' => array($element['#field_name'], $langcode, $delta),
  );

  $node = $form['#node'];

  $element['nid'] = array(
    '#type' => 'value',
    '#value' => $node->nid,
  );

  $type = node_type_get_type($node);

  if ($type->has_title) {
    $element['title'] = array(
      '#type' => 'textfield',
      '#title' => check_plain($type->title_label),
      '#required' => TRUE,
      '#default_value' => $node->title,
      '#maxlength' => 255,
      '#weight' => -5,
    );
  }

  field_attach_form('node', $node, $element, $form_state);

  $enabled_fields = array_filter($settings['enabled_fields']);

  foreach ($settings['enabled_fields'] as $field_name => $value) {
    if (empty($value)) {
      unset($element[$field_name]);
    }
  }

  return $element;
}


/**
 * Implements hook_field_is_empty()
 */
function field_nodeform_field_is_empty($item, $field) {
  $nodes_update_cache = &drupal_static('field_nodeform_nodes_update');

  $nid = $item['nid'];
  unset($item['nid']);

  $node = node_load($nid);
  $language = $node->language;

  $node_clone = clone $node;

  $is_empty = TRUE;

  foreach ($item as $field_name=>$field_value) {
    if (is_array($field_value)) {
      foreach ($field_value[$language] as $delta=>$single_value) {
        $node_field = $node->$field_name;

        $value_keys = array_keys($single_value);

        foreach ($value_keys as $key) {
          if ($single_value[$key] != $node_field[$language][$delta][$key]) {
            $is_empty = FALSE;
//              $node_clone_field =& $node_clone->$field_name;
//              $node_clone_field[$language][$delta][$key] = $single_value[$key];
            break;
          }
        }
      }
//      
    }
    else if (is_string($field_value)) {
      if ($node->$field_name != $field_value) {
        $is_empty = FALSE;
//        $node_clone->$field_name = $field_value;
        break;
      }
    }
    
  }

  $nodes_update_cache[$nid] = $is_empty ? FALSE : TRUE;

//  module_load_include('inc', 'diff', 'diff.pages');
//  $context = array(
//    'entity_type' => 'node',
//    'states' => array('raw'),
//    'view_mode' => 'diff_standard',
//  );
//  $node_diffs = diff_compare_entities($node, $node_clone, $context);

  return $is_empty;
}

/**
 * Implements hook_field_validate()
 */
function field_nodeform_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
//  foreach ($items as $delta => $item) {
//    if (!empty($item['value'])) {
//      if (!empty($field['settings']['max_length']) && drupal_strlen($item['value']) > $field['settings']['max_length']) {
//        $errors[$field['field_name']][$langcode][$delta][] = array(
//          'error' => 'text_max_length',
//          'message' => t('%name: the value may not be longer than %max characters.', array('%name' => $instance['label'], '%max' => $field['settings']['max_length'])),
//        );
//      }
//    }
//  }
}

/**
 * Implements hook_field_insert()
 * 
 * todo check user permission to update node
 */
function field_nodeform_field_insert($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if ($field['type'] == 'field_nodeform') {
//    dpm($items);
    $nodes_update_cache = &drupal_static('field_nodeform_nodes_update');
    // Let PHP round the value to ensure consistent behavior across storage
    // backends.
    foreach ($items as $delta => &$item) {
      if (isset($nodes_update_cache[$item['nid']]) && $nodes_update_cache[$item['nid']] === TRUE) {

        $node = node_load($item['nid'], NULL, TRUE);
        $old_vid = $node->vid;
		

        //$node->log = '';

        foreach ($item as $field_name=>$field_value) {
          $node->$field_name = $field_value;
        }

        $node->revision = 1;

        // $values = array();
        // $values['op'] = t('Save');
        // $values['revision'] = 1;
// 
        // $form_state = array(
          // 'values' => $values,
          // 'node' => $node,
        // );


//dpm($form_state);
//dpm($node);
//        module_load_include('inc', 'node', 'node.pages');
//        drupal_form_submit("{$node->type}_node_form", $form_state, $node);

        // $node = node_submit($node); // Prepare node for a submit
        node_save($node);

//dpm($form_state);
// dpm($node);
// throw new Exception('print $node');
        $new_vid = $node->vid;

        $item = array(
          'old_vid' => $old_vid,
          'new_vid' => $new_vid,
        );
      }
    }
  }
}

/**
 * Implements hook_field_formatter_info()
 */
function field_nodeform_field_formatter_info() {
  return array(
    'field_nodeform_formatter' => array(
      'label' => t('Default'),
      'field types' => array('field_nodeform'),
    ),
  );
}
